// <auto-generated />
using System;
using CourseServer.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseServer.Api.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20240112184932_Initital")]
    partial class Initital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("CourseServer.Core.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Summ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("CourseServer.Core.Models.Outgoing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("CourseServer.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PricingFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TypeFeatureId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PricingFeatureId")
                        .IsUnique();

                    b.HasIndex("TypeFeatureId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IncomeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductIncomes");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductOutgoing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("OutgoingId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOutgoings");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductPricingFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductTypeFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeFeature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("CourseServer.Core.Models.Product", b =>
                {
                    b.HasOne("CourseServer.Core.Models.ProductPricingFeature", "PricingFeature")
                        .WithOne("Product")
                        .HasForeignKey("CourseServer.Core.Models.Product", "PricingFeatureId");

                    b.HasOne("CourseServer.Core.Models.ProductTypeFeature", "TypeFeature")
                        .WithOne("Product")
                        .HasForeignKey("CourseServer.Core.Models.Product", "TypeFeatureId");

                    b.Navigation("PricingFeature");

                    b.Navigation("TypeFeature");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductIncome", b =>
                {
                    b.HasOne("CourseServer.Core.Models.Income", null)
                        .WithMany("IncomeProducts")
                        .HasForeignKey("IncomeId");

                    b.HasOne("CourseServer.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductOutgoing", b =>
                {
                    b.HasOne("CourseServer.Core.Models.Outgoing", null)
                        .WithMany("OutgoingProducts")
                        .HasForeignKey("OutgoingId");

                    b.HasOne("CourseServer.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CourseServer.Core.Models.Income", b =>
                {
                    b.Navigation("IncomeProducts");
                });

            modelBuilder.Entity("CourseServer.Core.Models.Outgoing", b =>
                {
                    b.Navigation("OutgoingProducts");
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductPricingFeature", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("CourseServer.Core.Models.ProductTypeFeature", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
